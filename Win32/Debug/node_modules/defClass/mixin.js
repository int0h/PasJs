function MixAtom(opts){
	this.fn = opts.fn;
	this.target = opts.target;
	this.priority = opts.priority || 0;
};

MixAtom.prototype.applyTo = function(obj, args){
	this.fn.call(obj, obj, args);	
};

function Mixin(atoms){
	var sortedAtoms = atoms.sort(function(a, b){
		return b.priority - a.priority;
	});
	this.atoms = sortedAtoms;
};

Mixin.prototype.applyTo = function(target, obj, args){
	var targetAtoms = this.atoms.filter(function(atom){
		return atom.target == target;
	});
	targetAtoms.forEach(function(atom){
		atom.applyTo(obj, args);
	});
};

Mixin.prototype.mix = function(mixin){
	var self = this;
	var uniqAtoms = mixin.atoms.filter(function(atom){
		return self.atoms.indexOf(atom) == -1;
	});
	var mixedAtoms = this.atoms.concat(uniqAtoms);	
	return new Mixin(mixedAtoms);
};

Mixin.prototype.subtract = function(mixin){
	var self = this;
	var restAtoms = self.atoms.filter(function(atom){
		return mixin.atoms.indexOf(atom) == -1;
	});
	return new Mixin(restAtoms);
};

exports.Mixin = Mixin;
exports.MixAtom = MixAtom;