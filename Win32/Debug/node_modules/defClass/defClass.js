var Mixin = require('./mixin.js').Mixin;
var MixAtom = require('./mixin.js').MixAtom;
var defineHelpers = require('./defineHelpers.js');
var def = defineHelpers.def;

function genFnField(gs, name){
	return function(val){
		if (arguments.length < 1){
			return gs[0](this.data[name]);
		};
		this.data[name] = gs[1](val);
	};
};

function parseField(name, inOpts){
	if (typeof inOpts == "function"){
		return parseField(name, {
			"gs": null,
			"flags": "",			
			"type": "function",
			"default": inOpts
		});
	};
	if (typeof inOpts != "object"){
		return parseField(name, {
			"default": inOpts
		});
	};
	var opts = {};
	opts.proxy = inOpts.proxy;
	opts.name = name;	
	opts.type = inOpts.type || typeof inOpts.default;
	if (inOpts.hasOwnProperty("default")){
		opts.default = inOpts.default;
	};
	if (inOpts.gs === undefined){
		inOpts.gs = toDataGs(name);
	};
	opts.gs = inOpts.gs; //todo: wrong
	if (!opts.gs){
		opts.value = inOpts.default;
	};	
	opts.flags = inOpts.flags !== undefined ? inOpts.flags : 'ew';
	return opts;
};

function parseFields(opts){
	var collector = new Mixin([]);
	for (var name in opts){
		var parsedOpts = parseField(name, opts[name]);
		var fieldMixin = optsToMixin(parsedOpts);
		collector = collector.mix(fieldMixin);
	};
	return collector;
};


function optsToMixin(opts){
	var atoms = [];

	if (opts.proxy){
		atoms.push(new MixAtom({"fn": function(instance){
			def({
				"name": opts.name,
				"flags": "e",
				"gs": [
					opts.proxy[0].bind(instance),
					opts.proxy[1].bind(instance)
				]
			}, instance.data)
		},  "target": "instance"}));
	};	
	atoms.push(new MixAtom({"fn": defineHelpers.defProp.bind(null, {
		"name": opts.name,
		"flags": opts.flags,
		"gs": opts.gs,
		"value": opts.default
	}),  "target": "classFn"}));

	var fieldMeta = {};
	if (opts.hasOwnProperty("default")){
		fieldMeta.default = opts.default;
	};
	fieldMeta.type = opts.type;
	atoms.push(new MixAtom({"fn": defineHelpers.setMeta.bind(null, 
		{
			"name": opts.name,
			"meta": fieldMeta
		}), 
	"target": "classFn"}));

	var mixin = new Mixin(atoms);
	return mixin;
};

function toDataGs(name){
	return [
		function(){
			return this.data[name];
		},
		function(val){
			this.data[name] = val;
		}
	];
};

function dataInit(instance){
	def({
		name: "data",
		flags: '',
		value: {}
	}, instance);
};

function metaInit(classFn){
	def({
		name: "meta",
		flags: '',
		value: {
			"fields": {}
		}
	}, classFn);
};

function setDefaultVals(instance){
	//alert(instance.constructor.meta.name );
	var meta = instance.constructor.meta;
	for (var name in meta.fields){
		var metaInfo = meta.fields[name];
		if (metaInfo.hasOwnProperty("default")){			
			instance.data[name] = metaInfo.default;
			//instance[name] = metaInfo.default;
			//alert(objToString(metaInfo.default));
		};
	};
};

function toClass(mixin){

	var classFn = function(parent, opts){	
		opts = opts || {};			
		opts.parent = parent;		
		var args = [].slice.call(arguments);
		mixin.applyTo("instance", this, opts);
	};

	classFn.mixin = mixin;
	mixin.applyTo("classFn", classFn);
	return classFn;
};

var baseMixin = new Mixin([
	new MixAtom({"fn": dataInit, "target": "instance", "priority": 20}),
	new MixAtom({"fn": metaInit, "target": "classFn", "priority": 20})
]); 

var defaultMixin = new Mixin([
	new MixAtom({"fn": setDefaultVals, "target": "instance", "priority": -1})
]);	 

function defMixin(opts){
	/*var resMixin = new Mixin([]);
	var fieldMix = parseFields(opts.fields);	
	var atoms = opts.atoms 
		? opts.atoms.slice()
		: [];
	var atomMixin = new Mixin(atoms);

	if (opts.mixs){		
		opts.mixs.forEach(function(mixin){
			if (typeof mixin == "function"){
				mixin = mixin.mixin;
			};
			resMixin = resMixin.mix(mixin);
		});	
	};
	if (opts.subtract){		
		opts.subtract.forEach(function(mixin){
			if (typeof mixin == "function"){
				mixin = mixin.mixin;
			};
			resMixin = resMixin.subtract(mixin);
		});	
	};
	resMixin = resMixin.mix(atomMixin);
	return resMixin;*/

	var fieldMix = parseFields(opts.fields);
	var resMixin = fieldMix; //baseMixin.mix(fieldMix).mix(defaultMixin);	
	if (opts.mixs){		
		opts.mixs.forEach(function(mixin){
			if (typeof mixin == "function"){
				mixin = mixin.mixin;
			};
			resMixin = resMixin.mix(mixin);
		});	
	};
	if (opts.subtract){		
		opts.subtract.forEach(function(mixin){
			if (typeof mixin == "function"){
				mixin = mixin.mixin;
			};
			resMixin = resMixin.subtract(mixin);
		});	
	};
	if (opts.atoms){
		var atomMixin = new Mixin(opts.atoms);
		resMixin = resMixin.mix(atomMixin);
	};
	//classMixin = classMixin.mix(baseMixin).mix(defaultMixin);

	return resMixin
};

function defClass(opts){
	var mixin = defMixin(opts);

	var nameMixin = new Mixin([
		new MixAtom({"target": "classFn", "priority": 3, "fn": function(classFn){
			classFn.meta.name = opts.name;
		}})
	]);
	
	var classMixin = baseMixin
		.mix(mixin)
		.mix(defaultMixin)
		.mix(nameMixin);	
	var classFn = toClass(classMixin);	
	return classFn;	
};

exports.defClass = defClass;
exports.defMixin = defMixin;
exports.toDataGs = toDataGs;