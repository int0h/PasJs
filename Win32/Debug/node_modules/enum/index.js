function Enum(enumObj){
	//var obj = enumObj;
	var self = this;
	var vals = [];
	if (Array.isArray(enumObj)){
		//obj = {};
		enumObj.forEach(function(name, val){
			self[name] = val;
			vals.push(val);
		});		
	}else{
		for (var i in enumObj){
			this[i] = enumObj[i];
			vals.push(enumObj[i]);
		};
	};
	this._values = vals;

};

/*function Enum(enumObj){
	//var obj = enumObj;
	var vals = [];
	if (Array.isArray(enumObj)){
		//obj = {};
		enumObj.forEach(function(name, val){
			this[name] = val;
			vals.push(val);
		});		
	}else{
		for (var i in enumObj){
			this[i] = enumObj[i];
			vals.push(enumObj[i]);
		};
	};
	this._values = vals;
	return this;
};*/

/*function Enum(enumObj){
	var obj = enumObj;
	var vals = [];
	if (Array.isArray(enumObj)){
		obj = {};
		enumObj.forEach(function(name, val){
			obj[name] = val;
			vals.push(val);
		});		
	}else{
		for (var i in enumObj){
			vals.push(enumObj[i]);
		};
	};
	obj._values = vals;
	return obj;
};*/



function getEnumVal(enumObj, val){
	if (typeof val == 'string'){
		val = enumObj[val];
	};
	if (enumObj._values.indexOf(val) == -1){		
		throw (new Error('invalid enum value', enumObj, val)).stack;
	};
	return val;
};

function enumGs(enumObj, gs){
	return [
		function(){
			return gs[0].call(this);
		},
		function(val){
			val = getEnumVal(enumObj, val);
			gs[1].call(this, val);
		}
	];
};

function enumSetGs(enumObj, gs){
	return [
		function(){
			return gs[0].call(this);
		},
		function(val){
			if (typeof val == "number"){
				gs[1].call(this, val);			
				return;
			};
			var vals = val.map(getEnumVal.bind(null, enumObj));
			var res = vals.reduce(function(b, c){
				return b + Math.pow(2, c);
			}, 0);
			gs[1].call(this, res);	
		}
	];
};

function defineEnumProp(enumObj, obj, name, desc){
	Object.defineProperty(obj, name, {
		"get": function(){
			var val = desc.get.call(this);
			return val;
		},
		"set": function(val){				
			val = getEnumVal(enumObj, val);
			desc.set.call(this, val);
		},
		"enumerable": desc.enumerable	
	});
};

function defineEnumSetProp(enumObj, obj, name, desc){
	Object.defineProperty(obj, name, {
		"get": function(){
			var val = desc.get.call(this);
			return val;
		},
		"set": function(val){		
			if (typeof val == "number"){
				desc.set.call(this, val);			
				return;
			};
			var vals = val.map(getEnumVal.bind(null, enumObj));
			var res = vals.reduce(function(b, c){
				return b + Math.pow(2, c);
			}, 0);
			desc.set.call(this, res);			
		},
		"enumerable": desc.enumerable		
	});
};

exports.enumGs = enumGs;
exports.enumSetGs = enumSetGs;
exports.defineEnumProp = defineEnumProp;
exports.defineEnumSetProp = defineEnumSetProp;
exports.Enum = Enum;




