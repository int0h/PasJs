var delphiClasses = require('delphiClasses');
var winMsgs = require('pjsSystem/windowsMessages.js')
var EventEmitter = require('event-emitter');
var enums = require('./enums.js');
var enumGs = require('enum').enumGs;
var enumSetGs = require('enum').enumSetGs;


var Mixin = require('defClass/mixin').Mixin;
var MixinAtom = require('defClass/mixin').MixAtom;
var defClass = require('defClass/defClass').defClass;
var defMixin = require('defClass/defClass').defMixin;

//var Mixin = require('mixin/core.js').Mixin;
var fnAim = require('mixin/helpers.js').fnAim;
//var defMixin = require('mixin/helpers.js').defMixin;

var defData = require('mixin/helpers.js').defData;
var defProp = require('mixin/helpers.js').defProp;
var defMethod = require('mixin/helpers.js').defMethod;
var defStaticProp = require('mixin/helpers.js').defStaticProp;

var nativeEvents = {
	"change": {name: "OnChange"},
	"click": {name: "OnClick"},
	"contextPopup": {name: "OnContextPopup"},
	"dblClick": {name: "OnDblClick"},
	"dragDrop": {name: "OnDragDrop"},
	"dragOver": {name: "OnDragOver"},
	"endDock": {name: "OnEndDock"},
	"endDrag": {name: "OnEndDrag"},
	"enter": {name: "OnEnter"},
	"exit": {name: "OnExit"},
	"gesture": {name: "OnGesture"},
	"keyDown": {name: "OnKeyDown"},
	"keyPress": {name: "OnKeyPress"},
	"keyUp": {name: "OnKeyUp"},
	"mouseActivate": {name: "OnMouseActivate"},
	"mouseDown": {name: "OnMouseDown"},
	"mouseEnter": {name: "OnMouseEnter"},
	"mouseLeave": {name: "OnMouseLeave"},
	"mouseMove": {name: "OnMouseMove"},
	"mouseUp": {name: "OnMouseUp"},
	"startDock": {name: "OnStartDock"},
	"startDrag": {name: "OnStartDrag"},
	"change": {name: "OnChange"},
	"click": {name: "OnClick"},
	"contextPopup": {name: "OnContextPopup"},
	"dblClick": {name: "OnDblClick"},
	"dragDrop": {name: "OnDragDrop"},
	"dragOver": {name: "OnDragOver"},
	"endDock": {name: "OnEndDock"},
	"endDrag": {name: "OnEndDrag"},
	"enter": {name: "OnEnter"},
	"exit": {name: "OnExit"},
	"gesture": {name: "OnGesture"},
	"keyDown": {name: "OnKeyDown"},
	"keyPress": {name: "OnKeyPress"},
	"keyUp": {name: "OnKeyUp"},
	"mouseActivate": {name: "OnMouseActivate"},
	"mouseDown": {name: "OnMouseDown"},
	"mouseEnter": {name: "OnMouseEnter"},
	"mouseLeave": {name: "OnMouseLeave"},
	"mouseMove": {name: "OnMouseMove"},
	"mouseUp": {name: "OnMouseUp"},
	"resize": {name: "OnResize"},
	"canResize": {name: "OnCanResize"},
	"startDock": {name: "OnStartDock"},
	"startDrag": {name: "OnStartDrag"}
};

function genSetFn(prop, value){
	return function(){
		this[prop] = value;
	};
};

function dataProxy(name){
	return [
		function(){
			return this.data[name];
		},
		function(val){
			this.data[name] = val;
		}
	];
};

function alias(obj, src, desc){
	Object.defineProperty(obj, desc, {
		"get": function(){
			return this[src];
		},
		"set": function(val){
			this[src] = val;
		}
	})
};

function genAliasGs(name){
	return [
		function(){
			return this[name];
		},
		function(val){
			this[name] = val;
		}
	];
};

function nativeProxy(name){
	return [
		function(){
			return this.nativeObj[name];
		},
		function(val){
			this.nativeObj[name] = val;
		}
	]
};



var mixins = {};

mixins.nativeAdditional = defMixin({
	"fields": {
		"sendMsg": function(msg, wp, lp){
			sendMsg(this.handle, msg, wp, lp);
		},
		"handle": {type: "number", gs:[
			function(){
				return this.nativeObj.Handle;
			},
			function(){
				throw new Error("handle is readOnly property");
			}
		]}		
	}
});

mixins.remove = defMixin({
	"fields": { 
		"remove": function(){
			if (!this.nativeObj){
				throw new Error('todo');
			};
			if (this.parent){
				var id = this.parent.children.indexOf(this);
				this.parent.children.splice(id, 1);
			};
			var nativeParent = this.nativeObj.Parent;			
			nativeParent.RemoveControl(this.nativeObj);			
		}
	}
});

function getPropObj(){
	var obj = {};
	for (var i in this.data){		
		var val = this.data[i];
		var fieldMeta = this.constructor.meta.fields[i];				
		if (fieldMeta && val !== fieldMeta.default && fieldMeta.type != "object"){
			obj[i] = this.data[i];
		};		
	};	
	return obj;
};

function setPropObj(obj){
	for (var i in this.data){
		if (!obj.hasOwnProperty(i)){			
			var fieldMeta = this.constructor.meta.fields[i];
			if (fieldMeta){
				this.data[i] = fieldMeta.default;
			};
			continue;
		};		
		this.data[i] = obj[i];
	};	
};

function getFullObj(){
	var obj = {};
	obj.properties = getPropObj.call(this);
	obj.className = this.constructor.meta.name;
	obj.children = this.children.map(function(child){
		return getFullObj.call(child);
	});
	return obj;
};

function setFullObj(obj, idObj){
	var self = this;
	this.children.forEach(function(child){
		child.remove();
	});
	setPropObj.call(this, obj.properties);
	if (idObj){
		var id = obj.properties.id;
		idObj[id] = self;
	};
	obj.children.forEach(function(childObj){
		var childClass = c[childObj.className];
		var child = new childClass(self);
		setFullObj.call(child, childObj, idObj);		
	});	
};

mixins.json = defMixin({
	"fields": { 
		"toJson": function(arg1, arg2){
			var obj = getFullObj.call(this);
			return JSON.stringify(obj, arg1, arg2);
		},
		"fromJson": function(jsonCode, idObj){
			var obj = JSON.parse(jsonCode);
			setFullObj.call(this, obj, idObj);
		}
	}
});

function genNativeMixin(nativeClass){
	return new Mixin([		
		new MixinAtom({
			"priority": 0,
			"target": "instance",
			"fn": function(self, opts){		
				//alert(objToString(self));
				var nativeParent = opts.parent
					? opts.parent._	
					: null; 					
				var nativeObj = self.nativeObj || new nativeClass(nativeParent);
				//alert(objToString(nativeParent));

				self.nativeObj = nativeObj;				
				nativeObj.Parent = nativeParent;
				self._ = self.nativeObj;
			}
		}),
		new MixinAtom({
			"priority": 0,
			"target": "classFn",
			"fn": function(classFn, opts){		
				classFn.meta.nativeName = nativeClass.name;
			}
		})
	]).mix(mixins.nativeAdditional);	
};

mixins.context = new Mixin([
	new MixinAtom({"target": "instance", "fn": function(self, opts){
		opts.context = opts.context || (
			self.parent
				? self.parent.context
				: globalContext
		);
		self.context = opts.context;
		opts.context.doc[self.id] = self;
		opts.context.elms.push(self);	
	}})
]);

mixins.parentship = new Mixin([
	new MixinAtom({"target": "instance", "fn": function(self, opts){
		self.children = [];
	}})
]);

mixins.makeParent = new Mixin([
	new MixinAtom({"target": "instance", "fn": function(self, opts){
		if (global.s){
			alert(objToString(opts.parent));
		}
		self.parent = opts.parent;
		if (self.parent){
			self.parent.children.push(self);
		};
	}})
]);

/*mixins.init = new Mixin([
	new MixinAtom({"target": "classFn", "fn": function(self, opts){
		classFn.meta = {
			"types": {},
			"defaults": {}
		};
	}}),
	new MixinAtom({"target": "instance", "fn": function(self, opts){
		self.parent = opts.parent;
		if (self.parent){
			self.parent.children.push(self);
		};
		self.children = [];
		self.data = {};	
	}}),
	new MixinAtom({"target": "instance", "priority": -1, "fn": function(self, opts){
		var classFn = self.constructor;
		for (var i in classFn.meta.defaults){
			this.data[i] = classFn.meta.defaults[i];
		};	
	}})
]);*/

mixins.layout = defMixin({
	"atoms" : [
		new MixinAtom({
			"target": "instance", 
			"priority": -2, 
			"fn": function(self, opts){
				var parent = self.parent;
				if (!parent || !parent.layout){
					return;
				};
				parent.layout.place(parent, self);
			}
		})
	],
	"fields": {
		"layout": {default: null},
		"layoutData": {default: null}	
	}
});

mixins.visibility = defMixin({
	"fields": {
		"visible": {default: true, proxy: nativeProxy("Visible")},
		"show": genSetFn("visible", true),
		"hide": genSetFn("visible", false),
		"toggle": function(visibility){
			visibility = visibility !== undefined
				? visibility 
				: !this.visible;
			this.visible = visibility;
			return this;
		}
	}
});

mixins.focus = defMixin({
	"fields": {
		"focused": {type: "boolean", proxy: nativeProxy("Focused"), gs:[
			function(){
				return this.nativeObj.Focused;
			},
			function(val){
				if (val){
					this.nativeObj.SetFocus();
				};
				this.nativeObj.Focused = val;
			}
		]}		
	}
});

mixins.ability = defMixin({
	"fields": {
		"enabled": {default: true, proxy: nativeProxy("Enabled")},
		"enable": genSetFn("enabled", true),
		"disable": genSetFn("enabled", false),
		"toggleAbility": function(ability){
			ability = ability || !this.enabled;
			this.enabled = ability;
			return this;
		}
	}
});

mixins.eventEmitter = defMixin({
	"atoms": [
		new MixinAtom({
			"target": "instance",
			"fn": function(self){
				self.eventEmitter = new EventEmitter();
				self.handledEvents = [];
			}
		})
	],
	"fields": {
		"on": function(name, listenner){		
			var self = this;
			var nativeEvent = nativeEvents[name];
			var handled = this.handledEvents.indexOf(name) != -1;		
			if (nativeEvent && !handled){

				function handler(){
					var realArgs = [].slice.call(arguments);
					self.eventEmitter.emit.apply(self.eventEmitter, [name].concat(realArgs));
				};

				this._[nativeEvent.name] = handler;
				this.handledEvents.push(name);
			};
			this.eventEmitter.on.call(this.eventEmitter, name, function(){
				return listenner.apply(self, arguments);
			});
			return self;
		},
		"emit": function(){
			this.eventEmitter.emit.apply(this.eventEmitter, arguments);
			return this;
		},
		"off": function(){
			var realArgs = [].slice.call(arguments);
			this.eventEmitter.off.apply(this.eventEmitter, realArgs);
			return this;
		}
	}
});

function nativeProxyChangeEmmiter(name, eventName){
	return [
		function(){			
			return this.nativeObj[name];
		},
		function(val){
			if (this.nativeObj[name] != val){
				this.emit(eventName);
			};
			this.nativeObj[name] = val;			
		}
	]
};

mixins.move = defMixin({
	"fields": {
		"x": {default: 0, "type": "number", "proxy": nativeProxyChangeEmmiter("Left", "move")},
		"y": {default: 0, "type": "number", "proxy": nativeProxyChangeEmmiter("Top", "move")},
		"left": {type: "number", gs: genAliasGs("x")},
		"top": {type: "number", gs: genAliasGs("y")},
		"right": {type: "number", gs: [
			function(){				
				var globW = this.parent
					? this.parent.clientW 
					: screen.Width;
				return globW - (this.x + this.w);
			},
			function(val){
				var globW = this.parent
					? this.parent.clientW 
					: screen.Width;
				this.x = globW - this.w - val;
			}
		]},
		"bottom": {type: "number", gs: [
			function(){				
				var globH = this.parent
					? this.parent.clientH 
					: screen.Height;
				return globH - (this.y + this.h);
			},
			function(val){
				var globH = this.parent
					? this.parent.clientH 
					: screen.Height;
				this.y = globH - this.h - val;
			}
		]},
		"screenPos": {
			"type": "object",
			"gs": [
				function(){
					if (!this.parent){
						return {
							"x": this.x,
							"y": this.y
						};
					};
					var rec = {
						"X": this.x,
						"Y": this.y
					};
					rec = this.parent.nativeObj.ClientToScreen(rec);					
					return {
						"x": rec.X,
						"y": rec.Y
					};
				},
				function(val){
					if (!this.parent){						
						this.x = val.x;
						this.y = val.y;
					};
					var rec = {
						"X": val.x,
						"Y": val.y
					};
					rec = this.parent.nativeObj.ScreenToClient(rec);
					this.x = rec.X;
					this.y = rec.Y;
				}
			],			
		}	
	}
});

function restrictVal(val, min, max){
	if (min * 1 === min && val < min){
		val = min;
	};
	if (max * 1 === max && val > max){
		val = max;
	};
	return val;
};

function resizeGs(name, minName, maxName){
	return [
		function(){
			return this.data[name];
		},
		function(val){
			val = restrictVal(val, this[minName], this[maxName]);
			if (this.data[name] == val){
				return;
			};			
			this.data[name] = val;
			this.emit('resize');	
		}
	];
};

function sign(val){
	if (val == 0){
		return 0;
	};
	if (val > 0){
		return 1;
	};
	return -1;
};

function resizeLimitGs(name, limited, moreOrLess){
	return [
		function(){
			return this.data[name];
		},
		function(val){
			this.data[name] = val;
			if (sign(val - this[limited]) != moreOrLess){
				this[limited] = val;
			};
		}
	]
};

mixins.resize = defMixin({
	"fields": {
		"w": {
			"type": "number", 
			"proxy": nativeProxy("Width"), 
			"gs": resizeGs("w", "minWidth", "maxWidth")
		},
		"h": {
			"type": "number", 
			"proxy": nativeProxy("Height"), 
			"gs": resizeGs("h", "minHeight", "maxHeight")
		},	
		"minWidth": {type: "number", default: null, gs: resizeLimitGs("minWidth", "w", -1)},
		"maxWidth": {type: "number", default: null, gs: resizeLimitGs("maxWidth", "w", 1)},
		"minHeight": {type: "number", default: null, gs: resizeLimitGs("minHeight", "h", -1)},
		"maxHeight": {type: "number", default: null, gs: resizeLimitGs("maxHeight", "h", 1)},
		"width": {type: "number", gs: genAliasGs("w")},
		"height": {type: "number", gs: genAliasGs("h")},
		"clientW": {type: "number", proxy: [
			function(){	
				return this.nativeObj.hasOwnProperty("ClientWidth")
					? this.nativeObj.ClientWidth
					: this.nativeObj.Width;
			},
			function(val){
				if (!this.nativeObj.hasOwnProperty("ClientWidth")){
					this.nativeObj.Width = val;
					return;
				};
				this.nativeObj.ClientWidth = val;
			}
		]},
		"clientH": {type: "number", proxy: [
			function(){	
				return this.nativeObj.hasOwnProperty("ClientHeight")
					? this.nativeObj.ClientHeight
					: this.nativeObj.Height;
			},
			function(val){
				if (!this.nativeObj.hasOwnProperty("ClientHeight")){
					this.nativeObj.Height = val;
					return;
				};
				this.nativeObj.ClientHeight = val;
			}
		]}/*,
		"width": "@w",
		"height": "@h"*/
	}
});

mixins.hint = defMixin({
	"fields": {
		"hint": {default: "", proxy:[
			function(){
				return this.nativeObj.ShowHint ? this.nativeObj.Hint : '';
			},
			function(val){
				this.nativeObj.ShowHint = val != '';
				this.nativeObj.Hint = val || '';
			}
		]}
	}	
});

mixins.valueLines = defMixin({
	"fields": {
		"value": {default: "", type: "string", gs:[
			function(){
				return this.nativeObj.Lines.Text;
			},
			function(val){
				this.nativeObj.Lines.Text = val;
			}
		]}
	}
});

mixins.valueChecked = defMixin({
	"fields": {
		"value": {type: "boolean", gs: nativeProxy("State")}
	}
});

mixins.items = defMixin({
	"fields": {
		"items": {default: true, gs:[
			function(){
				return this.nativeObj.Items.Text.split('\n\r');
			},
			function(val){
				this.nativeObj.Items.Text = val.join('\n');
			}
		]}
	}
});

mixins.selectableList = defMixin({
	"fields": {
		"itemToString": {default: function(item){
			return item.toString();
		}},
		"items": {default: [], gs: [
			function(){
				return this.data.items
			},
			function(val){
				this.data.items = val;
				var nativeItems = val.map(this.itemToString);
				this.nativeObj.Items.Text = nativeItems.join('\n');
			}
		]},
		"getSelected": function(){
			var selection = this.selection;
			return this.items.filter(function(i, id){
				return selection[id];
			});
		},
		"getNotSelected": function(){
			var selection = this.selection;
			return this.items.filter(function(i, id){
				return !selection[id];
			});
		},
		"selectedId": {gs: [
			function(){
				var selArr = [];
				this.selection.forEach(function(itemSel, id){
					if (itemSel){
						selArr.push(id);
					};
				});
				return selArr;
			},
			function(val){
				var newSelection = [];
				for (var i = 0; i < this.nativeObj.Items.Count; i++){
					newSelection.push(val.indexOf(i) != -1);				
				};
				this.selection = newSelection;
			}
		]},
		"selection": {gs: [
			function(){
				var arr = [];
				var len = this.nativeObj.Items.Count;
				for (var i = 0; i < len; i++){
					arr.push(this.nativeObj.Selected[i]);
				};
				return arr;
			},
			function(val){
				if (!this.nativeObj.MultiSelect){				
					var lastSelected = -1;
					for (var i = val.length - 1; i >= 0; i--){
						if (val[i]){
							lastSelected = i;
							break;
						};
					};				
					this.nativeObj.ItemIndex = lastSelected;
					return;
				};
				var len = this.nativeObj.Items.Count;
				for (var i = 0; i < len; i++){
					sys_listBoxSetSelected(this.nativeObj, i, !!val[i]);
				};	
			}
		]}
	}
});

mixins.password = defMixin({
	"fields": {
		"password": {default: false, gs:[
			function(){
				var nullCh = this.nativeObj.PasswordChar == sys_codeToChar(0);
				return nullCh ? null : this.nativeObj.PasswordChar;
			},
			function(val){
				if (!val){
					this.nativeObj.PasswordChar = sys_codeToChar(0);
					return;
				};
				if (typeof val != 'string'){
					val = '*';
				};
				this.nativeObj.PasswordChar = val[0];			
			}
		]}
	}
});

mixins.opacity = defMixin({
	"fields": {
		"opacity": {default: 1, gs:[
			function(){
				if (!this.nativeObj.AlphaBlend){
					return 1;
				};
				return this.nativeObj.AlphaBlendValue / 255;
			},
			function(val){
				if (val >= 1){
					this.nativeObj.AlphaBlend = false;
					return;
				}else{
					this.nativeObj.AlphaBlend = true;
				};
				this.nativeObj.AlphaBlendValue = val * 255;			
			}
		]}
	}
});

mixins.id = defMixin({
	"atoms": [
		new MixinAtom({
			"priority": -2,
			"target": "instance",
			"fn": function(self){
				self.id = 'id_' + Math.floor(Math.random()*256*256*256).toString(16);
			}
		})
	],
	"fields": {
		"id": {default: null, type: "string"}
	}
});

/*function genGeneral(idStorage){
	return new Mixin([
		mixins.init,
		mixins.eventEmitter,
		//genNativeIdMixin(idStorage),
		mixins.context
	]);
};*/


function mixSome(mixins){
	var collector = new Mixin([]);
	mixins.forEach(function(mixin){
		collector = collector.mix(mixin);
	});
	return collector;
};


mixins.general = defMixin({
	"mixs": [
		mixins.id,
		mixins.parentship,
		mixins.makeParent,
		mixins.eventEmitter,
		//genNativeIdMixin(idStorage),
		mixins.context,		
		mixins.remove,
		mixins.json
	]
});

mixins.visual = defMixin({
	"mixs": [
		mixins.visibility,
		mixins.ability,
		mixins.move,
		mixins.resize,
		mixins.hint,		
		mixins.layout,
		mixins.focus
	],
	"fields": {
		"cursor": {
			default: enums.cursor.crDefault,
			type: enums.cursor,  
			proxy: enumGs(enums.cursor, nativeProxy("Cursor"))
		},
		"align": {
			default: enums.align.alNone, 
			type: enums.align, 
			proxy: enumGs(enums.align, nativeProxy("Align"))
		}
	}
});

mixins.input = defMixin({
	"fields": {
		"tabOrder": {type: "string", proxy: nativeProxy("TabOrder")}
	}
});

mixins.text = defMixin({
	"fields": {
		"readOnly": {default: false, proxy: nativeProxy("ReadOnly")},
		"maxLength": {default: 0, proxy: nativeProxy("MaxLength")}
	}
});

mixins.multilineText = defMixin({
	"mixs": [
		mixins.text,
		mixins.valueLines
	],
	"fields": {
		"scrollToLine": function(line){			
			this.sendMsg(winMsgs.EM_LINESCROLL, 0, line);
		},
		"lineCount": {type: "number", proxy: [
			function(){
				return this._.Lines.Count;
			},
			function(){
				return;throw new Error("lineCount is readOnly property");
			}
		]},
		"wantReturns": {default: true, type: "string", proxy: nativeProxy("WantReturns")},
		"wantTabs": {default: 0, type: "string", proxy: nativeProxy("WantTabs")}
	}
});


/*
var general = new Mixin([
	mixins.init,
	genNativeMixin(delphiClasses.TBitBtn),
	mixins.visibility,
	mixins.ability,
	mixins.move,		
	mixins.resize,	
	mixins.hint,
	mixins.eventEmitter			
]);

global.general = general;

function MyClass(parent, opts){		

	opts.parent = parent;
	general.instance(this, opts);
};
general.classFn(MyClass);*/

//exports.Btn = MyClass;
exports.mixins = mixins;
exports.genNativeMixin = genNativeMixin;
//exports.genGeneral = genGeneral;