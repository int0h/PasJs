var delphiClasses = require('delphiClasses');
var enums = require('./enums.js');
var enumModule = require('enum');
var enumGs = require('enum').enumGs;
var enumSetGs = require('enum').enumSetGs;
/*var enumGs = function(){};
var enumSetGs = function(){};*/

var UniqStorage = require('./uniqStorage.js');

var Mixin = require('defClass/mixin').Mixin;
var MixinAtom = require('defClass/mixin').MixAtom;
var defClass = require('defClass');

/*var _Mixin = require('defClass/mixin');
var defClass = require('defClass');*/


var ms = require('./mixins.js');
//var Mixin = require('mixin/core.js').Mixin;
var defMixin = require('mixin/helpers.js').defMixin;

function objEach(obj, fn){
	for (var i in obj){
		fn(obj[i], i, obj);
	};
};

/*var olds = require('./sysjs/components.js');
for (var i in olds){
	exports[i] = olds[i];	
}
*/
var idStorage = new UniqStorage();
exports.idStorage = idStorage;


function nativeProxy(name){
	return [
		function(){
			return this.nativeObj[name];
		},
		function(val){
			//alert(objToString(this));
			//alert((new Error).stack.split(':'));
			this.nativeObj[name] = val;
		}
	]
};

//var general = ms.genGeneral(idStorage);
var general = ms.mixins.general;

var compMixins = {};

//##############################################################################################

compMixins.Hint = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.THintWindow),
		general,		
		ms.mixins.visual
	],
	"atoms": [
		new MixinAtom({
			"target": "instance", 
			"fn": function(self, opts){
				this._.ActivateHint({
					"Top": 0,
					"Left": 0,
					"Right": 0,
					"Bottom": 0
				}, '');
			}
		})
	],
	"fields": {
		"label": {default: "[Hint]", type: "string", proxy: nativeProxy("Caption")}
	}
})


//##############################################################################################



compMixins.Form = defClass({
	"atoms": [
		new MixinAtom({
			"target": "instance", 
			"priority": 0.5, 
			"fn": function(self, opts){
				if (opts && opts.mainForm){
					self.nativeObj = createMainForm();	
				};
			}
		}),
		new MixinAtom({
			"target": "classFn",
			"priority": -0.5,
			"fn": function form(classFn){
				classFn.meta.fields.visible.default = false;
			}
		})
	],
	"mixs": [
		ms.genNativeMixin(delphiClasses.TForm),
		general,		
		ms.mixins.visual,
		ms.mixins.opacity
	],
	"fields": {
		"autoScroll": {default: true, proxy: nativeProxy("AutoScroll")},
		"autoSize": {default: false, proxy: nativeProxy("AutoSize")},
		"clientHeight": {type: "number", proxy: nativeProxy("ClientHeight")},
		"clientWidth": {type: "number", proxy: nativeProxy("ClientWidth")},
		"label": {default: "[Form]", type: "string", proxy: nativeProxy("Caption")},	
		"borderStyle": {
			default: 'bsSizeable',
			type: enums.borderStyle, 
			proxy: enumGs(enums.borderStyle, nativeProxy("BorderStyle"))
		},	
		"borderIcons": {
			default: ["biSystemMenu", "biMinimize", "biMaximize"], 
			type: [enums.borderIcon], 
			proxy: enumSetGs(enums.borderIcon, nativeProxy("BorderIcons"))
		},	
		"defaultMonitor": {
			default: 'dmActiveForm', 
			type: enums.defaultMonitor, 
			proxy: enumGs(enums.defaultMonitor, nativeProxy("DefaultMonitor"))
		}	
	}
});


//##############################################################################################



compMixins.Button = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TBitBtn),
		general,
		ms.mixins.visual,
		ms.mixins.input
	],
	"fields": {
		"label": {default: "[Button]", type: "string", proxy: nativeProxy("Caption")}
	}
});


//##############################################################################################


compMixins.Edit = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TEdit),
		general,
		ms.mixins.visual,
		ms.mixins.password,
		ms.mixins.input,
		ms.mixins.text
	],
	"fields": {
		"autoSelect": {default: true, proxy: nativeProxy("AutoSelect")},
		"numbersOnly": {default: false, proxy: nativeProxy("NumbersOnly")},
		"value": {default: "", type: "string", proxy: nativeProxy("Text")}
	}	
});


//##############################################################################################


compMixins.Memo = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TMemo),
		general,
		ms.mixins.visual,
		ms.mixins.input,
		ms.mixins.multilineText
	],
	"fields": {
		"scrollBars": {
			default: 'ssNone',
			type: enums.scrollBars, 
			proxy: enumGs(enums.scrollBars, nativeProxy("ScrollBars"))
		}	
	}
});


//##############################################################################################


compMixins.RichEdit = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TRichEdit),
		general,
		ms.mixins.visual,
		ms.mixins.input,
		ms.mixins.multilineText
	],
	"fields": {
		"plainText": {default: false, proxy: nativeProxy("PlainText")},
		"scrollBars": {
			default: 'ssNone',
			type: enums.scrollBars, 
			proxy: enumGs(enums.scrollBars, nativeProxy("ScrollBars"))
		}	
	}	
});


//##############################################################################################


compMixins.RadioButton = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TRadioButton),
		general,
		ms.mixins.visual,
		ms.mixins.input
	],
	"fields": {	
		"label": {default: "[RadioButton]", type: "string", proxy: nativeProxy("Caption")},		
		"value": {default: false, type: "boolean", proxy: nativeProxy("Checked")}		
	} 
});


//##############################################################################################


compMixins.CheckBox = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TCheckBox),
		general,
		ms.mixins.visual,
		ms.mixins.input
	],
	"fields": {	
		"#pipe": {'allowGrayed': false},				
		"label": {default: "[CheckBox]", type: "string", proxy: nativeProxy("Caption")},
		"value": {default: false, type: "boolean", proxy: nativeProxy("Checked")}		
	}
});


//##############################################################################################


compMixins.ScrollBar = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TScrollBar),
		general,
		ms.mixins.visual,
		ms.mixins.input
	],
	"fields": {
		"min": {default: 0, type: "number", proxy: nativeProxy("Min")},
		"max": {default: 100, type: "number", proxy: nativeProxy("Max")},
		"smallChange": {default: 1, type: "number", proxy: nativeProxy("SmallChange")},
		"largeChange": {default: 1, type: "number", proxy: nativeProxy("LargeChange")},
		"pageSize": {default: 0, type: "number", proxy: nativeProxy("PageSize")},
		"value": {default: 0, type: "number", proxy: nativeProxy("Position")},
		"orientation": {
			default: 'horizontal', 
			type: enums.orientation, 
			proxy: enumGs(enums.orientation, nativeProxy("Kind"))
		}			
	} 
});


//##############################################################################################


compMixins.TrackBar = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TTrackBar),
		general,
		ms.mixins.visual,
		ms.mixins.input
	],
	"fields": {	
		"min": {default: 0, type: "number", proxy: nativeProxy("Min")},
		"max": {default: 10, type: "number", proxy: nativeProxy("Max")},
		"pageSize": {default: 2, type: "number", proxy: nativeProxy("PageSize")},
		"frequency": {default: 1, type: "number", proxy: nativeProxy("Frequency")},
		"selStart": {default: 0, type: "number", proxy: nativeProxy("SelStart")},
		"selEnd": {default: 0, type: "number", proxy: nativeProxy("SelEnd")},
		"thumbLength": {default: 20, type: "number", proxy: nativeProxy("ThumbLength")},
		"sliderVisible": {default: true, type: "boolean", proxy: nativeProxy("SliderVisible")},
		"showSelRange": {default: true, type: "boolean", proxy: nativeProxy("ShowSelRange")},
		"lineSize": {default: 1, type: "number", proxy: nativeProxy("LineSize")},				
		"value": {default: 0, type: "number", proxy: nativeProxy("Position")},
		"orientation": {
			default: 'horizontal', 
			type: enums.orientation, 
			proxy: enumGs(enums.orientation, nativeProxy("Kind"))
		},
		"tickStyle": {
			default: 'tsAuto', 
			type: enums.tickStyle, 
			proxy: enumGs(enums.tickStyle, nativeProxy("TickStyle"))
		},
		"tickMarks": {
			default: 'tmBottomRight', 
			type: enums.tickMarks, 
			proxy: enumGs(enums.tickMarks, nativeProxy("TickMarks"))
		},
		"positionToolTip": {
			default: 'ptNone', 
			type: enums.positionToolTip, 
			proxy: enumGs(enums.positionToolTip, nativeProxy("PositionToolTip"))
		}			
	} 
});



//##############################################################################################


/*compMixins.ProgressBar = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TProgressBar),
		general,
		ms.mixins.visual,
		ms.mixins.input
	],
	"fields": {				
		"min": {default: 0, type: "number", proxy: nativeProxy("Min")},
		"max": {default: 100, type: "number", proxy: nativeProxy("Max")},
		"marqueeInterval": {default: 10, type: "number", proxy: nativeProxy("MarqueeInterval")},
		"smooth": {default: false, type: "boolean", proxy: nativeProxy("Smooth")},
		"smoothReverse": {default: false, type: "boolean", proxy: nativeProxy("SmoothReverse")},
		"value": {default: 0, type: "number", proxy: nativeProxy("Position")},
		"orientation": {
			default: 'horizontal', 
			type: enums.orientation, 
			proxy: enumGs(enums.orientation, nativeProxy("Orientation"))
		},
		"state": {
			default: 'pbsNormal', 
			type: enums.pbState, 
			proxy: enumGs(enums.pbState, nativeProxy("State"))
		},
		"style": {
			default: 'pbstNormal', 
			type: enums.pbStyle, 
			proxy: enumGs(enums.pbStyle, nativeProxy("Style"))
		}	
	} 
});*/

compMixins.ProgressBar = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TProgressBar),
		general,
		ms.mixins.visual,
		ms.mixins.input
	],
	"fields": {				
		"min": {default: 0, type: "number", proxy: nativeProxy("Min")},
		"max": {default: 100, type: "number", proxy: nativeProxy("Max")},
		"marqueeInterval": {default: 10, type: "number", proxy: nativeProxy("MarqueeInterval")},
		"smooth": {default: false, type: "boolean", proxy: nativeProxy("Smooth")},
		"smoothReverse": {default: false, type: "boolean", proxy: nativeProxy("SmoothReverse")},
		"value": {default: 0, type: "number", proxy: nativeProxy("Position")},
		"fraction": {default: 0, gs: [
			function(){
				var len = this.max - this.min;
				return (this.value - this.min) / len;
			},
			function(val){
				var len = this.max - this.min;
				this.value = val * len + this.min;
			}
		]},
		"orientation": {
			default: 'horizontal', 
			type: enums.orientation, 
			proxy: enumGs(enums.orientation, nativeProxy("Orientation"))
		},
		"state": {
			default: 'pbsNormal', 
			type: enums.pbState, 
			proxy: enumGs(enums.pbState, nativeProxy("State"))
		},
		"style": {
			default: 'pbstNormal', 
			type: enums.pbStyle, 
			proxy: enumGs(enums.pbStyle, nativeProxy("Style"))
		}	
	} 
});


//##############################################################################################


compMixins.Label = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TLabel),
		general,
		ms.mixins.visual,
	],
	"fields": {				
		"autoSize": {default: true, type: "boolean", proxy: nativeProxy("AutoSize")},
		"label": {default: '[Label]', type: "string", proxy: nativeProxy("Caption")}
	} 
});


//##############################################################################################


compMixins.Panel = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TPanel),
		general,
		ms.mixins.visual
	],
	"fields": {				
		"label": {default: '[Panel]', type: "string", proxy: nativeProxy("Caption")}
	} 
});


//##############################################################################################


compMixins.GroupBox = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TGroupBox),
		general,
		ms.mixins.visual
	],
	"fields": {				
		"label": {default: '[GroupBox]', type: "string", proxy: nativeProxy("Caption")}
	} 
});


//##############################################################################################


compMixins.ScrollBox = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TScrollBox),
		general,
		ms.mixins.visual
	],	
	"fields": {				
		"label": {default: '[ScrollBox]', type: "string", proxy: nativeProxy("Caption")}
	} 
});


//##############################################################################################


compMixins.ListBox = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TListBox),
		general,	
		ms.mixins.visual,
		ms.mixins.selectableList,
		//ms.mixins.selectedItems,
		//ms.mixins.selectedId,	
		ms.mixins.input
	],
	"fields": {			
		"autoComplete": {default: true, type: "boolean", proxy: nativeProxy("AutoComplete")},
		"autoCompleteDelay": {default: 500, type: "number", proxy: nativeProxy("AutoCompleteDelay")},
		"columns": {default: 0, type: "number", proxy: nativeProxy("Columns")},
		"multiSelect": {default: false, type: "boolean", proxy: nativeProxy("MultiSelect")},
		"sorted": {default: false, type: "boolean", proxy: nativeProxy("Sorted")},
		"tabWidth": {default: 0, type: "number", proxy: nativeProxy("TabWidth")},
		"extendedSelect": {default: true, type: "boolean", proxy: nativeProxy("ExtendedSelect")}
	} 
});


//##############################################################################################


compMixins.ComboBox = defClass({
	"mixs": [
		ms.genNativeMixin(delphiClasses.TComboBox),
		general,	
		ms.mixins.visual,
		ms.mixins.selectableList,
		//ms.mixins.selectedItems,
		//ms.mixins.selectedId,	
		ms.mixins.input
	],
	"fields": {			
		/*"autoComplete": {default: true, type: "boolean", proxy: nativeProxy("AutoComplete")},
		"autoCompleteDelay": {default: 500, type: "number", proxy: nativeProxy("AutoCompleteDelay")},
		"columns": {default: 0, type: "number", proxy: nativeProxy("Columns")},
		"multiSelect": {default: false, type: "boolean", proxy: nativeProxy("MultiSelect")},
		"sorted": {default: false, type: "boolean", proxy: nativeProxy("Sorted")},
		"tabWidth": {default: 0, type: "number", proxy: nativeProxy("TabWidth")},
		"extendedSelect": {default: true, type: "boolean", proxy: nativeProxy("ExtendedSelect")}*/
	} 
});


//##############################################################################################


objEach(compMixins, function(mixin, name){
	/*var classFn = function(parent, opts){	
		opts = opts || {};			
		opts.parent = parent;		
		mixin.instance(this, opts);		
	};
	mixin.classFn(classFn);
	classFn.meta.name = name;*/
	mixin.meta.name = name;
	exports[name] = mixin;	
});
