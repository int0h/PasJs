
function UniqStorage(){
	this.curId = 0;
	this.idDict = [];
	this.dict = {};
};

UniqStorage.prototype.set = function(key, value){
	var found = this.dict[key] !== undefined;
	if (found){
		throw new Error('cannot reassign key: ' + key);
	};
	var id = this.curId++;
	this.dict[key] = {
		"value": value,
		"id": id
	};
	this.idDict[id] = key;
	return id;
};

UniqStorage.prototype.get = function(key){
	var found = this.dict[key];
	if (!found){
		return undefined;
	};
	return found.value;
};

UniqStorage.prototype.getId = function(key){
	var found = this.dict[key];
	if (!found){
		return undefined;
	};
	return found.id;
};

UniqStorage.prototype.keyById = function(id){
	return this.idDict[id];
};

UniqStorage.prototype.genKey = function(suffix){
	var key = 'id_' + this.curId + (suffix || '');
	var found = this.dict[key] !== undefined;	
	if (found){
		var suf = '_' + Math.round(Math.random() * 240 + 16).toString(16)
		key = this.genKey(suf);
	};
	return key;
};

UniqStorage.prototype.del = function(key){
	var found = this.dict[key];
	if (found === undefined){
		return;
	};
	var id = found.id;
	delete this.idDict[id];
	delete this.dict[key];
};

UniqStorage.prototype.move = function(fromKey, toKey){
	var val = this.get(fromKey);
	var id = this.set(toKey, val);
	this.del(fromKey);
	return id;
};

module.exports = UniqStorage;